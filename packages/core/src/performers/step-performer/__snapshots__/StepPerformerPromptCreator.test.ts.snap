// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PromptCreator constructor should merge redundant categories 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a specific test step using the mentioned testing framework.
Generate the minimal executable code to perform the desired intent, based on the provided step and context.

## Testing Framework

Framework: Test Framework

Description: A testing framework for unit testing purposes

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "expect button to be visible"

### View hierarchy

This is the complete view hierarchy. Use only the relevant parts for the executable code. In your answer include a list containing the snipped from the view-hierarchy, under a <VIEW_HIERARCHY_SNIPPET></VIEW_HIERARCHY_SNIPPET> block. If there is no need for view hierarchy, or there is no active page, write \`No view hierarchy needed for this action\` inside the block.
\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

#### swipe(direction: string)

Swipes in the specified direction.

##### Example

\`\`\`
await swipe("up");
\`\`\`

##### Guidelines

- Use this method to scroll the screen.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

#### toBeEnabled()

Asserts that the element is enabled and can be interacted with.

##### Example

\`\`\`
await expect(element(by.id("submitButton"))).toBeEnabled();
\`\`\`

##### Guidelines

- Ensure that the element is not disabled before performing actions.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "expect button to be visible"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action. Add the relevant snippet from the view hierarchy to the response inside <VIEW_HIERARCHY_SNIPPED></VIEW_HIERARCHY_SNIPPED> block.
2. Generate the minimal executable code required to perform the intent using the available API inside <CODE></CODE> block.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. If you need to share data between steps, use the 'sharedContext' object. You can access and modify it directly like: sharedContext.myKey = 'myValue'
7. Wrap the generated code with <CODE></CODE> block, without any additional formatting.
8. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

#### Example of providing the view hierarchy snippet:
<VIEW_HIERARCHY_SNIPPET>
<RCTViewComponentView alpha="1.0" class="RCTViewComponentView" focused="false" height="769" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0" label="User ID: 12345" tag="124" visibility="visible" width="393" x="0" y="0">
<RCTTextView alpha="1.0" class="RCTTextView" focused="false" height="20" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0_1" label="User ID: 12345" visibility="visible" width="393" x="0" y="0"/>
<UIButton alpha="1.0" class="UIButton" focused="false" height="50" id="user-profile-12345" visibility="visible" width="200" text="User Profile"/>
</RCTViewComponentView>
</VIEW_HIERARCHY_SNIPPET>
#### Example of using shared context between steps:
<CODE>
// Step 1: Store the user ID
const userId = await getUserId();
sharedContext.userId = userId;

// Step 2: Use the stored user ID
await element(by.id('user-' + sharedContext.userId)).tap();
</CODE>

Please provide your code below:"
`;

exports[`PromptCreator extentAPICategories should extend the API catalog with new category 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a specific test step using the mentioned testing framework.
Generate the minimal executable code to perform the desired intent, based on the provided step and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "expect button to be visible"

### View hierarchy

This is the complete view hierarchy. Use only the relevant parts for the executable code. In your answer include a list containing the snipped from the view-hierarchy, under a <VIEW_HIERARCHY_SNIPPET></VIEW_HIERARCHY_SNIPPET> block. If there is no need for view hierarchy, or there is no active page, write \`No view hierarchy needed for this action\` inside the block.
\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

### Custom Actions

#### swipe(direction: string)

Swipes in the specified direction.

##### Example

\`\`\`
await swipe("up");
\`\`\`

##### Guidelines

- Use this method to scroll the screen.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "expect button to be visible"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action. Add the relevant snippet from the view hierarchy to the response inside <VIEW_HIERARCHY_SNIPPED></VIEW_HIERARCHY_SNIPPED> block.
2. Generate the minimal executable code required to perform the intent using the available API inside <CODE></CODE> block.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. If you need to share data between steps, use the 'sharedContext' object. You can access and modify it directly like: sharedContext.myKey = 'myValue'
7. Wrap the generated code with <CODE></CODE> block, without any additional formatting.
8. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

#### Example of providing the view hierarchy snippet:
<VIEW_HIERARCHY_SNIPPET>
<RCTViewComponentView alpha="1.0" class="RCTViewComponentView" focused="false" height="769" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0" label="User ID: 12345" tag="124" visibility="visible" width="393" x="0" y="0">
<RCTTextView alpha="1.0" class="RCTTextView" focused="false" height="20" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0_1" label="User ID: 12345" visibility="visible" width="393" x="0" y="0"/>
<UIButton alpha="1.0" class="UIButton" focused="false" height="50" id="user-profile-12345" visibility="visible" width="200" text="User Profile"/>
</RCTViewComponentView>
</VIEW_HIERARCHY_SNIPPET>
#### Example of using shared context between steps:
<CODE>
// Step 1: Store the user ID
const userId = await getUserId();
sharedContext.userId = userId;

// Step 2: Use the stored user ID
await element(by.id('user-' + sharedContext.userId)).tap();
</CODE>

Please provide your code below:"
`;

exports[`PromptCreator extentAPICategories should extend the API with existing category 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a specific test step using the mentioned testing framework.
Generate the minimal executable code to perform the desired intent, based on the provided step and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "expect button to be visible"

### View hierarchy

This is the complete view hierarchy. Use only the relevant parts for the executable code. In your answer include a list containing the snipped from the view-hierarchy, under a <VIEW_HIERARCHY_SNIPPET></VIEW_HIERARCHY_SNIPPET> block. If there is no need for view hierarchy, or there is no active page, write \`No view hierarchy needed for this action\` inside the block.
\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

#### swipe(direction: string)

Swipes in the specified direction.

##### Example

\`\`\`
await swipe("up");
\`\`\`

##### Guidelines

- Use this method to scroll the screen.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

### Custom Actions

#### swipe(direction: string)

Swipes in the specified direction.

##### Example

\`\`\`
await swipe("up");
\`\`\`

##### Guidelines

- Use this method to scroll the screen.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "expect button to be visible"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action. Add the relevant snippet from the view hierarchy to the response inside <VIEW_HIERARCHY_SNIPPED></VIEW_HIERARCHY_SNIPPED> block.
2. Generate the minimal executable code required to perform the intent using the available API inside <CODE></CODE> block.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. If you need to share data between steps, use the 'sharedContext' object. You can access and modify it directly like: sharedContext.myKey = 'myValue'
7. Wrap the generated code with <CODE></CODE> block, without any additional formatting.
8. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

#### Example of providing the view hierarchy snippet:
<VIEW_HIERARCHY_SNIPPET>
<RCTViewComponentView alpha="1.0" class="RCTViewComponentView" focused="false" height="769" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0" label="User ID: 12345" tag="124" visibility="visible" width="393" x="0" y="0">
<RCTTextView alpha="1.0" class="RCTTextView" focused="false" height="20" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0_1" label="User ID: 12345" visibility="visible" width="393" x="0" y="0"/>
<UIButton alpha="1.0" class="UIButton" focused="false" height="50" id="user-profile-12345" visibility="visible" width="200" text="User Profile"/>
</RCTViewComponentView>
</VIEW_HIERARCHY_SNIPPET>
#### Example of using shared context between steps:
<CODE>
// Step 1: Store the user ID
const userId = await getUserId();
sharedContext.userId = userId;

// Step 2: Use the stored user ID
await element(by.id('user-' + sharedContext.userId)).tap();
</CODE>

Please provide your code below:"
`;

exports[`PromptCreator should create a prompt for an intent correctly 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a specific test step using the mentioned testing framework.
Generate the minimal executable code to perform the desired intent, based on the provided step and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

This is the complete view hierarchy. Use only the relevant parts for the executable code. In your answer include a list containing the snipped from the view-hierarchy, under a <VIEW_HIERARCHY_SNIPPET></VIEW_HIERARCHY_SNIPPET> block. If there is no need for view hierarchy, or there is no active page, write \`No view hierarchy needed for this action\` inside the block.
\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

A snapshot image is attached for visual reference.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "tap button"

Please follow these steps carefully:

1. Analyze the provided intent, the view hierarchy, and the snapshot image to understand the required action.
2. When interacting with an element, ensure that you use the correct identifier from the view hierarchy. Do not rely on a screenshot to guess the element's selectors. Add the relevant snippet from the view hierarchy to the response inside <VIEW_HIERARCHY_SNIPPED></VIEW_HIERARCHY_SNIPPED> block.
3. Assess the positions of elements within the screen layout. Ensure that tests accurately reflect their intended locations, such as whether an element is centered or positioned relative to others. Tests should fail if the actual locations do not align with the expected configuration.
4. Determine if the intent can be fully validated visually using the snapshot image.
5. If the intent can be visually analyzed and passes the visual check, return only comments explaining the successful visual assertion.
6. If the visual assertion fails, return code that throws an informative error explaining the failure, inside <CODE></CODE> block.
7. If visual validation is not possible, proceed to generate the minimal executable code required to perform the intent.
8. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
9. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
10. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
11. If you need to share data between steps, use the 'sharedContext' object. You can access and modify it directly like: sharedContext.myKey = 'myValue'
12. Wrap the generated code with <CODE></CODE> block, without any additional formatting.
13. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

#### Example of providing the view hierarchy snippet:
<VIEW_HIERARCHY_SNIPPET>
<RCTViewComponentView alpha="1.0" class="RCTViewComponentView" focused="false" height="769" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0" label="User ID: 12345" tag="124" visibility="visible" width="393" x="0" y="0">
<RCTTextView alpha="1.0" class="RCTTextView" focused="false" height="20" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0_1" label="User ID: 12345" visibility="visible" width="393" x="0" y="0"/>
<UIButton alpha="1.0" class="UIButton" focused="false" height="50" id="user-profile-12345" visibility="visible" width="200" text="User Profile"/>
</RCTViewComponentView>
</VIEW_HIERARCHY_SNIPPET>
#### Example of using shared context between steps:
<CODE>
// Step 1: Store the user ID
const userId = await getUserId();
sharedContext.userId = userId;

// Step 2: Use the stored user ID
await element(by.id('user-' + sharedContext.userId)).tap();
</CODE>

#### Visual validation using the snapshot:
\`\`\`typescript
// Visual assertion passed based on the snapshot image.
\`\`\`

Please provide your code below:"
`;

exports[`PromptCreator should handle when no snapshot image is attached 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a specific test step using the mentioned testing framework.
Generate the minimal executable code to perform the desired intent, based on the provided step and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "expect button to be visible"

### View hierarchy

This is the complete view hierarchy. Use only the relevant parts for the executable code. In your answer include a list containing the snipped from the view-hierarchy, under a <VIEW_HIERARCHY_SNIPPET></VIEW_HIERARCHY_SNIPPET> block. If there is no need for view hierarchy, or there is no active page, write \`No view hierarchy needed for this action\` inside the block.
\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "expect button to be visible"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action. Add the relevant snippet from the view hierarchy to the response inside <VIEW_HIERARCHY_SNIPPED></VIEW_HIERARCHY_SNIPPED> block.
2. Generate the minimal executable code required to perform the intent using the available API inside <CODE></CODE> block.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. If you need to share data between steps, use the 'sharedContext' object. You can access and modify it directly like: sharedContext.myKey = 'myValue'
7. Wrap the generated code with <CODE></CODE> block, without any additional formatting.
8. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

#### Example of providing the view hierarchy snippet:
<VIEW_HIERARCHY_SNIPPET>
<RCTViewComponentView alpha="1.0" class="RCTViewComponentView" focused="false" height="769" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0" label="User ID: 12345" tag="124" visibility="visible" width="393" x="0" y="0">
<RCTTextView alpha="1.0" class="RCTTextView" focused="false" height="20" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0_1" label="User ID: 12345" visibility="visible" width="393" x="0" y="0"/>
<UIButton alpha="1.0" class="UIButton" focused="false" height="50" id="user-profile-12345" visibility="visible" width="200" text="User Profile"/>
</RCTViewComponentView>
</VIEW_HIERARCHY_SNIPPET>
#### Example of using shared context between steps:
<CODE>
// Step 1: Store the user ID
const userId = await getUserId();
sharedContext.userId = userId;

// Step 2: Use the stored user ID
await element(by.id('user-' + sharedContext.userId)).tap();
</CODE>

Please provide your code below:"
`;

exports[`PromptCreator should include error in the prompt if previous step failed 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a specific test step using the mentioned testing framework.
Generate the minimal executable code to perform the desired intent, based on the provided step and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

This is the complete view hierarchy. Use only the relevant parts for the executable code. In your answer include a list containing the snipped from the view-hierarchy, under a <VIEW_HIERARCHY_SNIPPET></VIEW_HIERARCHY_SNIPPET> block. If there is no need for view hierarchy, or there is no active page, write \`No view hierarchy needed for this action\` inside the block.
\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

### Previous steps

#### Step 1
- Intent: "navigate to login screen"
- Generated code:
\`\`\`
await element(by.id("login")).tap();
\`\`\`
- Result: success

#### Step 2
- Intent: "enter username"
- Generated code:
\`\`\`
await element(by.id("username")).typeText("john_doe");
\`\`\`
- Error occurred in your previous attempt. Try another approach to perform this step. Error message:
\`\`\`
could not find element
\`\`\`


## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "tap button"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action. Add the relevant snippet from the view hierarchy to the response inside <VIEW_HIERARCHY_SNIPPED></VIEW_HIERARCHY_SNIPPED> block.
2. Generate the minimal executable code required to perform the intent using the available API inside <CODE></CODE> block.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. If you need to share data between steps, use the 'sharedContext' object. You can access and modify it directly like: sharedContext.myKey = 'myValue'
7. Wrap the generated code with <CODE></CODE> block, without any additional formatting.
8. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

#### Example of providing the view hierarchy snippet:
<VIEW_HIERARCHY_SNIPPET>
<RCTViewComponentView alpha="1.0" class="RCTViewComponentView" focused="false" height="769" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0" label="User ID: 12345" tag="124" visibility="visible" width="393" x="0" y="0">
<RCTTextView alpha="1.0" class="RCTTextView" focused="false" height="20" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0_1" label="User ID: 12345" visibility="visible" width="393" x="0" y="0"/>
<UIButton alpha="1.0" class="UIButton" focused="false" height="50" id="user-profile-12345" visibility="visible" width="200" text="User Profile"/>
</RCTViewComponentView>
</VIEW_HIERARCHY_SNIPPET>
#### Example of using shared context between steps:
<CODE>
// Step 1: Store the user ID
const userId = await getUserId();
sharedContext.userId = userId;

// Step 2: Use the stored user ID
await element(by.id('user-' + sharedContext.userId)).tap();
</CODE>

Please provide your code below:"
`;

exports[`PromptCreator should include previous intents in the context 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a specific test step using the mentioned testing framework.
Generate the minimal executable code to perform the desired intent, based on the provided step and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

This is the complete view hierarchy. Use only the relevant parts for the executable code. In your answer include a list containing the snipped from the view-hierarchy, under a <VIEW_HIERARCHY_SNIPPET></VIEW_HIERARCHY_SNIPPET> block. If there is no need for view hierarchy, or there is no active page, write \`No view hierarchy needed for this action\` inside the block.
\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

### Previous steps

#### Step 1
- Intent: "navigate to login screen"
- Generated code:
\`\`\`
await element(by.id("login")).tap();
\`\`\`
- Result: success

#### Step 2
- Intent: "enter username"
- Generated code:
\`\`\`
await element(by.id("username")).typeText("john_doe");
\`\`\`
- Result: john doe


## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "tap button"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action. Add the relevant snippet from the view hierarchy to the response inside <VIEW_HIERARCHY_SNIPPED></VIEW_HIERARCHY_SNIPPED> block.
2. Generate the minimal executable code required to perform the intent using the available API inside <CODE></CODE> block.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. If you need to share data between steps, use the 'sharedContext' object. You can access and modify it directly like: sharedContext.myKey = 'myValue'
7. Wrap the generated code with <CODE></CODE> block, without any additional formatting.
8. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

#### Example of providing the view hierarchy snippet:
<VIEW_HIERARCHY_SNIPPET>
<RCTViewComponentView alpha="1.0" class="RCTViewComponentView" focused="false" height="769" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0" label="User ID: 12345" tag="124" visibility="visible" width="393" x="0" y="0">
<RCTTextView alpha="1.0" class="RCTTextView" focused="false" height="20" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0_1" label="User ID: 12345" visibility="visible" width="393" x="0" y="0"/>
<UIButton alpha="1.0" class="UIButton" focused="false" height="50" id="user-profile-12345" visibility="visible" width="200" text="User Profile"/>
</RCTViewComponentView>
</VIEW_HIERARCHY_SNIPPET>
#### Example of using shared context between steps:
<CODE>
// Step 1: Store the user ID
const userId = await getUserId();
sharedContext.userId = userId;

// Step 2: Use the stored user ID
await element(by.id('user-' + sharedContext.userId)).tap();
</CODE>

Please provide your code below:"
`;

exports[`PromptCreator should not include error if the error was not in the immediate previous step 1`] = `
"# Test Code Generation

You are an AI assistant tasked with generating test code for a specific test step using the mentioned testing framework.
Generate the minimal executable code to perform the desired intent, based on the provided step and context.

## Context

### Intent to perform

Generate the minimal executable code to perform the following intent: "tap button"

### View hierarchy

This is the complete view hierarchy. Use only the relevant parts for the executable code. In your answer include a list containing the snipped from the view-hierarchy, under a <VIEW_HIERARCHY_SNIPPET></VIEW_HIERARCHY_SNIPPET> block. If there is no need for view hierarchy, or there is no active page, write \`No view hierarchy needed for this action\` inside the block.
\`\`\`
<View><Button testID="submit" title="Submit" /></View>
\`\`\`

### Snapshot image

No snapshot image is attached for this intent.

### Previous steps

#### Step 1
- Intent: "navigate to login screen"
- Generated code:
\`\`\`
await element(by.id("login")).tap();
\`\`\`
- Result: success

#### Step 2
- Intent: "enter username"
- Generated code:
\`\`\`
await element(by.id("username")).typeText("john_doe");
\`\`\`


#### Step 3
- Intent: "enter username"
- Generated code:
\`\`\`
await element(by.id("username")).typeText("john_doe");
\`\`\`
- Result: john doe


## Available Testing Framework API

### Actions

#### tap(element: Element)

Taps on the specified element.

##### Example

\`\`\`
await element(by.id("button")).tap();
\`\`\`

##### Guidelines

- Ensure the element is tappable before using this method.

#### typeText(element: Element, text: string)

Types the specified text into the element.

##### Example

\`\`\`
await element(by.id("input")).typeText("Hello, World!");
\`\`\`

##### Guidelines

- Use this method only on text input elements.

### Assertions

#### toBeVisible()

Asserts that the element is visible on the screen.

##### Example

\`\`\`
await expect(element(by.id("title"))).toBeVisible();
\`\`\`

##### Guidelines

- Consider scroll position when using this assertion.

### Matchers

#### by.id(id: string)

Matches elements by their ID attribute.

##### Example

\`\`\`
element(by.id("uniqueId"))
\`\`\`

##### Guidelines

- Use unique IDs for elements to avoid conflicts, combine with atIndex() if necessary.

## Instructions

Your task is to generate the minimal executable code to perform the following intent: "tap button"

Please follow these steps carefully:

1. Analyze the provided intent and the view hierarchy to understand the required action. Add the relevant snippet from the view hierarchy to the response inside <VIEW_HIERARCHY_SNIPPED></VIEW_HIERARCHY_SNIPPED> block.
2. Generate the minimal executable code required to perform the intent using the available API inside <CODE></CODE> block.
3. If you cannot generate the relevant code due to ambiguity or invalid intent, return code that throws an informative error explaining the problem in one sentence.
4. Each step must be completely independent - do not rely on any variables or assignments from previous steps. Even if a variable was declared or assigned in a previous step, you must redeclare and reassign it in your current step.
5. Use the provided framework APIs as much as possible - prefer using the documented API methods over creating custom implementations.
6. If you need to share data between steps, use the 'sharedContext' object. You can access and modify it directly like: sharedContext.myKey = 'myValue'
7. Wrap the generated code with <CODE></CODE> block, without any additional formatting.
8. Do not provide any additional code beyond the minimal executable code required to perform the intent.

### Verify the prompt

Before generating the code, please review the provided context and instructions to ensure they are clear and unambiguous. If you encounter any issues or have questions, please throw an informative error explaining the problem.

### Examples

#### Example of throwing an informative error:
\`\`\`typescript
throw new Error("Unable to find the 'Submit' button element in the current context.");
\`\`\`

#### Example of providing the view hierarchy snippet:
<VIEW_HIERARCHY_SNIPPET>
<RCTViewComponentView alpha="1.0" class="RCTViewComponentView" focused="false" height="769" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0" label="User ID: 12345" tag="124" visibility="visible" width="393" x="0" y="0">
<RCTTextView alpha="1.0" class="RCTTextView" focused="false" height="20" id="detox_temp_0_0_0_0_0_0_0_0_0_0_0_0_1" label="User ID: 12345" visibility="visible" width="393" x="0" y="0"/>
<UIButton alpha="1.0" class="UIButton" focused="false" height="50" id="user-profile-12345" visibility="visible" width="200" text="User Profile"/>
</RCTViewComponentView>
</VIEW_HIERARCHY_SNIPPET>
#### Example of using shared context between steps:
<CODE>
// Step 1: Store the user ID
const userId = await getUserId();
sharedContext.userId = userId;

// Step 2: Use the stored user ID
await element(by.id('user-' + sharedContext.userId)).tap();
</CODE>

Please provide your code below:"
`;
